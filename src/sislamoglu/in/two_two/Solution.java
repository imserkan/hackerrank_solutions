package sislamoglu.in.two_two;

import java.math.BigInteger;
import java.util.Arrays;

//TODO: UNSOLVED. solve the team limits case, most prob 2^800 after some value its not necessary to check remaining
public class Solution {

    private static BigInteger[] bigIntegerList = new BigInteger[801];

    public static void main(String[] args) {
        generateBigIntegerPowers();
        System.out.println(Solution.twoTwo("2222222") == 7);
        System.out.println(Solution.twoTwo("24256") == 4);
        System.out.println(Solution.twoTwo("65536") == 1);
        System.out.println(Solution.twoTwo("023223") == 4);
        System.out.println(Solution.twoTwo("33579") == 0);
        System.out.println(Solution.twoTwo("9303535670983768199031344740966458039726609416797671171603074549512182887851493418575245449136173639177760276560207077549242900846267596823817051317718446589520242536874132581700120107002038199303870846751188192899823151552628349788604516295066307994130118526061826166445047808309163001841380667575628151274558987543914186376514799892578820116121531383164833962895501326553806236997089282520174174189206292883439012459432693877366459895758465185873923518437208883287869410049671804351768330228241833181048771841834309240249132277574952747489997467168763400466618303709392785810954982875161446396373040800947562126272731545618170968107390172263733095197200113358841034017182951507037254979515982202834948083154776267844089139019063040156654448338365040715366458968162887836583628774290327941701420576894069006881693378223441337877537377325813845730080900918242835443359855685076558915384842574884883772410178635875682021801984576460752303423488223007451985306231415357182726483615059804162147483648324") == 464);
        System.out.println(Solution.twoTwo("1844674407370955161674106937111882365071085430405560261026092790186009960985252853765064402969559046455624695217271474139797930007529685824264482073058782076648391351619055042102986574113383200344578589757929931868733441327844982041917746723970516381171568323982794317579807998610345501008899652130606847906255663073214172223323715616252538366448344131768098523799946916468379859578177088483047579320327229475734293036792189718636043847330179466014340038463189508943008496205724668159759037237747788792245498535675607031239995639976648680825923975906526582032462837994195753268665938105581321030972818840265816397736281374726739986666787659948666753771754907668409286105635143120275902562304104187725513747723032497684230019653080386848786186065006191528308813081840900501117522378138618035792858279853022394381967012525845615079380677438317669219470236837179906477475985598217372094136390078377123228155963917938085569707674435584356811923176489970264571492362373784095686656302231454903657293676544") == 407);
    }

    static int twoTwo(String a) {
        int[] arr = new int[a.length()];
        for (int i = 0; i < a.length(); i++){
            arr[i] = Integer.valueOf(String.valueOf(a.charAt(0)));
        }
        int count = 0;
        for (int i = 0; i < a.length(); i++){
            for (int j = i+1; j <= a.length(); j++){
                String substringVal = a.substring(i, j);
                if (!substringVal.startsWith("0")){
                    BigInteger bigInteger = new BigInteger(a.substring(i, j));
                    if (bigInteger.compareTo(bigIntegerList[bigIntegerList.length-1]) == 1){
                        break;
                    }
                    if (Arrays.stream(bigIntegerList).anyMatch(bigInteger::equals)){
                        count++;
                    }

                }
            }
        }
        return count;
    }

    static void generateBigIntegerPowers(){
        for (int i = 0; i < 801; i++){
            BigInteger bigInteger = new BigInteger("2");
            bigIntegerList[i] = bigInteger.pow(i);
        }
    }
}
